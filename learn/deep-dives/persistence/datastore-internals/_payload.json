[{"data":1,"prerenderedAt":1193},["ShallowReactive",2],{"learn-content-/learn/deep-dives/persistence/datastore-internals":3,"learn-/learn/deep-dives/persistence/datastore-internals-articles":1182,"learn-surround-/learn/deep-dives/persistence/datastore-internals":1183},{"id":4,"title":5,"body":6,"description":1161,"extension":1162,"head":1163,"meta":1164,"navigation":139,"navigationTitle":1165,"ogImage":1166,"order":136,"path":1170,"robots":1171,"schemaOrg":1163,"seo":1172,"sitemap":1173,"stem":1180,"surround":139,"__hash__":1181},"learn/1.learn/1.deep-dives/1.persistence/2.datastore-internals.md","Metaflow Datastore Internals: Caching and Resume",{"type":7,"value":8,"toc":1149},"minimal",[9,14,18,23,35,38,67,73,76,81,88,92,778,781,786,789,868,871,874,877,880,885,888,901,905,964,972,975,981,984,987,990,994,997,1000,1011,1014,1018,1021,1049,1053,1073,1078,1081,1085,1088,1091,1094,1098,1101,1124,1128,1131,1142,1145],[10,11,13],"h1",{"id":12},"understanding-metaflows-datastore-internals-of-caching-and-resume","Understanding Metaflow's Datastore: Internals of Caching and Resume",[15,16,17],"p",{},"Metaflow's interaction with its configured datastore isn't just a background detail; it's the engine driving some of its most powerful features—like robust data versioning, highly efficient caching, and the life-saving ability to resume flows. If you've ever wondered how Metaflow seems to magically pick up where it left off, or how it avoids recomputing steps unnecessarily, a look into its datastore mechanics will provide the answers. Let's delve into how Metaflow works with data behind the scenes.",[19,20,22],"h2",{"id":21},"the-power-of-content-addressed-storage","The Power of Content-Addressed Storage",[15,24,25,26,30,31,34],{},"At the heart of Metaflow's data management is ",[27,28,29],"strong",{},"Content-Addressed Storage (CAS)",", this is the mechanism that fundamentally shapes how Metaflow handles every piece of data—or ",[27,32,33],{},"artifact","—you create. In the CAS model, each artifact isn't identified by a filename or a path you choose, but by a unique cryptographic hash computed directly from its serialized content. Think of this hash as the artifact's fingerprint; it becomes its \"address\" or key within Metaflow's datastore.",[15,36,37],{},"Why is this approach so effective? It offers several key benefits that you'll appreciate in your daily work:",[39,40,41,52],"ul",{},[42,43,44,47,48,51],"li",{},[27,45,46],{},"Automatic Deduplication",": Imagine your flow processes a large, static dataset in multiple steps, or perhaps you re-run a flow that uses the same initial data. If different steps or even related flow runs produce the exact same data (meaning they have the identical content hash), Metaflow is smart enough to store this data ",[27,49,50],{},"only once",". This can lead to significant storage savings, especially when you're dealing with large datasets or complex models that might be shared or regenerated.",[42,53,54,57,58,62,63,66],{},[27,55,56],{},"Built-in Immutability and Versioning",": Since an artifact's identity ",[59,60,61],"em",{},"is"," its content hash, any change to an object—no matter how tiny—will result in a brand-new hash. This means a new, distinct artifact is created in the datastore. The original remains untouched. This inherent ",[27,64,65],{},"immutability"," is crucial; it's the bedrock of Metaflow's robust versioning capabilities, ensuring that past results are stable and always reproducible.",[68,69,70],"note",{},[15,71,72],{},"The concept of immutability in content-addressing is a powerful guarantee. Once an artifact is written to the datastore, it's set in stone. Any apparent \"change\" actually results in a new, versioned artifact, leaving the original intact. This is what allows you to confidently look back at past runs, knowing the data you see is exactly what was produced then. This stability is fundamental to tracking lineage and managing different data versions throughout your project's lifecycle.",[15,74,75],{},"To visualize this, consider how different data objects map to unique storage locations based on their content:",[77,78],"img",{"src":79,"width":80},"/content/learn/datastore-internals-01.png",750,[15,82,83,84,87],{},"It's not just your data artifacts that benefit from this. Metaflow also applies content-addressing to snapshot the ",[27,85,86],{},"code package"," associated with each run. This entire package (your flow script and any local modules) is bundled, hashed, and stored in the datastore. This ensures that you can always retrieve the exact version of the code that produced a specific set of artifacts, further bolstering reproducibility.",[19,89,91],{"id":90},"the-artifact-lifecycle-from-creation-to-datastore-and-back","The Artifact Lifecycle: From Creation to Datastore and Back",[93,94,100],"pre",{"className":95,"code":96,"language":97,"meta":98,"style":99},"language-python shiki shiki-themes material-theme-lighter material-theme-palenight","from metaflow import FlowSpec, step, current\n\nclass MyIllustrativeFlow(FlowSpec):\n  @step\n  def start(self):\n    print(f\"Starting flow {current.run_id}...\")\n    self.next(self.process_data)\n\n  @step\n  def process_data(self):\n    # 1. Creation & Assignment: An object is created in memory.\n    raw_data = [1, 2, 3, 4, 5]\n    processed_data_object = [x * 2 for x in raw_data]\n\n    # This assignment tells Metaflow to manage 'my_processed_data'.\n    self.my_processed_data = processed_data_object\n    # self.my_processed_data now holds [2, 4, 6, 8, 10] in memory.\n\n    print(f\"Step '{current.step_name}': Data processed: {self.my_processed_data}\")\n    self.next(self.use_data)\n\n  @step\n  def use_data(self):\n\n    # 6. Access: Metaflow retrieves 'my_processed_data' for this step.\n    #    - Metadata service is queried for the artifact's location (hash).\n    #    - Byte stream is read from the datastore.\n    #    - Deserialized back into a Python object.\n    retrieved_data = self.my_processed_data\n    # retrieved_data is now [2, 4, 6, 8, 10], loaded from the datastore.\n\n    print(f\"Step '{current.step_name}': Using data: {retrieved_data}\")\n    doubled_again = [x * 2 for x in retrieved_data]\n    self.final_result = doubled_again\n    self.next(self.end)\n\n  @step\n  def end(self):\n\n    # 'final_result' would also be persisted after this step completes.\n    print(f\"Step '{current.step_name}': Final result: {self.final_result}\")\n    print(f\"Flow {current.run_id} finished.\")\n\n# Upon step 'process_data' completion:\n# 2. Serialization: `self.my_processed_data` (the list [2, 4, 6, 8, 10]) is serialized (e.g., pickled).\n# 3. Hashing: A content hash (e.g., SHA1) is computed from the serialized bytes.\n# 4. Persistence (Write to Datastore): The serialized bytes are written to the datastore,\n#    often using the hash as part of its storage key. This is a datastore write operation.\n# 5. Metadata Update: Metaflow's metadata service records info about this artifact:\n#    flow, run ID, step name, task ID, and its content hash.\n","python","twoslash","",[101,102,103,134,141,161,171,188,226,248,253,260,274,281,319,351,356,362,378,384,389,430,450,455,462,476,481,487,493,499,505,521,527,532,567,594,609,629,634,641,655,660,666,704,731,736,742,748,754,760,766,772],"code",{"__ignoreMap":99},[104,105,108,112,116,119,122,126,129,131],"span",{"class":106,"line":107},"line",1,[104,109,111],{"class":110},"sNZSE","from",[104,113,115],{"class":114},"sv0dM"," metaflow ",[104,117,118],{"class":110},"import",[104,120,121],{"class":114}," FlowSpec",[104,123,125],{"class":124},"s4Nzc",",",[104,127,128],{"class":114}," step",[104,130,125],{"class":124},[104,132,133],{"class":114}," current\n",[104,135,137],{"class":106,"line":136},2,[104,138,140],{"emptyLinePlaceholder":139},true,"\n",[104,142,144,148,152,155,158],{"class":106,"line":143},3,[104,145,147],{"class":146},"sBv9x","class",[104,149,151],{"class":150},"s2dLm"," MyIllustrativeFlow",[104,153,154],{"class":124},"(",[104,156,157],{"class":150},"FlowSpec",[104,159,160],{"class":124},"):\n",[104,162,164,167],{"class":106,"line":163},4,[104,165,166],{"class":124},"  @",[104,168,170],{"class":169},"sp2xM","step\n",[104,172,174,177,180,182,186],{"class":106,"line":173},5,[104,175,176],{"class":146},"  def",[104,178,179],{"class":169}," start",[104,181,154],{"class":124},[104,183,185],{"class":184},"swAhH","self",[104,187,160],{"class":124},[104,189,191,194,196,199,203,207,210,213,217,220,223],{"class":106,"line":190},6,[104,192,193],{"class":169},"    print",[104,195,154],{"class":124},[104,197,198],{"class":146},"f",[104,200,202],{"class":201},"s9-rc","\"Starting flow ",[104,204,206],{"class":205},"sRqct","{",[104,208,209],{"class":169},"current",[104,211,212],{"class":124},".",[104,214,216],{"class":215},"sbA4_","run_id",[104,218,219],{"class":205},"}",[104,221,222],{"class":201},"...\"",[104,224,225],{"class":124},")\n",[104,227,229,232,234,237,239,241,243,246],{"class":106,"line":228},7,[104,230,231],{"class":114},"    self",[104,233,212],{"class":124},[104,235,236],{"class":169},"next",[104,238,154],{"class":124},[104,240,185],{"class":114},[104,242,212],{"class":124},[104,244,245],{"class":215},"process_data",[104,247,225],{"class":124},[104,249,251],{"class":106,"line":250},8,[104,252,140],{"emptyLinePlaceholder":139},[104,254,256,258],{"class":106,"line":255},9,[104,257,166],{"class":124},[104,259,170],{"class":169},[104,261,263,265,268,270,272],{"class":106,"line":262},10,[104,264,176],{"class":146},[104,266,267],{"class":169}," process_data",[104,269,154],{"class":124},[104,271,185],{"class":184},[104,273,160],{"class":124},[104,275,277],{"class":106,"line":276},11,[104,278,280],{"class":279},"s742E","    # 1. Creation & Assignment: An object is created in memory.\n",[104,282,284,287,290,293,296,298,301,303,306,308,311,313,316],{"class":106,"line":283},12,[104,285,286],{"class":114},"    raw_data ",[104,288,289],{"class":124},"=",[104,291,292],{"class":124}," [",[104,294,295],{"class":205},"1",[104,297,125],{"class":124},[104,299,300],{"class":205}," 2",[104,302,125],{"class":124},[104,304,305],{"class":205}," 3",[104,307,125],{"class":124},[104,309,310],{"class":205}," 4",[104,312,125],{"class":124},[104,314,315],{"class":205}," 5",[104,317,318],{"class":124},"]\n",[104,320,322,325,327,329,332,335,337,340,343,346,349],{"class":106,"line":321},13,[104,323,324],{"class":114},"    processed_data_object ",[104,326,289],{"class":124},[104,328,292],{"class":124},[104,330,331],{"class":114},"x ",[104,333,334],{"class":124},"*",[104,336,300],{"class":205},[104,338,339],{"class":110}," for",[104,341,342],{"class":114}," x ",[104,344,345],{"class":110},"in",[104,347,348],{"class":114}," raw_data",[104,350,318],{"class":124},[104,352,354],{"class":106,"line":353},14,[104,355,140],{"emptyLinePlaceholder":139},[104,357,359],{"class":106,"line":358},15,[104,360,361],{"class":279},"    # This assignment tells Metaflow to manage 'my_processed_data'.\n",[104,363,365,367,369,372,375],{"class":106,"line":364},16,[104,366,231],{"class":114},[104,368,212],{"class":124},[104,370,371],{"class":215},"my_processed_data",[104,373,374],{"class":124}," =",[104,376,377],{"class":114}," processed_data_object\n",[104,379,381],{"class":106,"line":380},17,[104,382,383],{"class":279},"    # self.my_processed_data now holds [2, 4, 6, 8, 10] in memory.\n",[104,385,387],{"class":106,"line":386},18,[104,388,140],{"emptyLinePlaceholder":139},[104,390,392,394,396,398,401,403,405,407,410,412,415,417,419,421,423,425,428],{"class":106,"line":391},19,[104,393,193],{"class":169},[104,395,154],{"class":124},[104,397,198],{"class":146},[104,399,400],{"class":201},"\"Step '",[104,402,206],{"class":205},[104,404,209],{"class":169},[104,406,212],{"class":124},[104,408,409],{"class":215},"step_name",[104,411,219],{"class":205},[104,413,414],{"class":201},"': Data processed: ",[104,416,206],{"class":205},[104,418,185],{"class":114},[104,420,212],{"class":124},[104,422,371],{"class":215},[104,424,219],{"class":205},[104,426,427],{"class":201},"\"",[104,429,225],{"class":124},[104,431,433,435,437,439,441,443,445,448],{"class":106,"line":432},20,[104,434,231],{"class":114},[104,436,212],{"class":124},[104,438,236],{"class":169},[104,440,154],{"class":124},[104,442,185],{"class":114},[104,444,212],{"class":124},[104,446,447],{"class":215},"use_data",[104,449,225],{"class":124},[104,451,453],{"class":106,"line":452},21,[104,454,140],{"emptyLinePlaceholder":139},[104,456,458,460],{"class":106,"line":457},22,[104,459,166],{"class":124},[104,461,170],{"class":169},[104,463,465,467,470,472,474],{"class":106,"line":464},23,[104,466,176],{"class":146},[104,468,469],{"class":169}," use_data",[104,471,154],{"class":124},[104,473,185],{"class":184},[104,475,160],{"class":124},[104,477,479],{"class":106,"line":478},24,[104,480,140],{"emptyLinePlaceholder":139},[104,482,484],{"class":106,"line":483},25,[104,485,486],{"class":279},"    # 6. Access: Metaflow retrieves 'my_processed_data' for this step.\n",[104,488,490],{"class":106,"line":489},26,[104,491,492],{"class":279},"    #    - Metadata service is queried for the artifact's location (hash).\n",[104,494,496],{"class":106,"line":495},27,[104,497,498],{"class":279},"    #    - Byte stream is read from the datastore.\n",[104,500,502],{"class":106,"line":501},28,[104,503,504],{"class":279},"    #    - Deserialized back into a Python object.\n",[104,506,508,511,513,516,518],{"class":106,"line":507},29,[104,509,510],{"class":114},"    retrieved_data ",[104,512,289],{"class":124},[104,514,515],{"class":114}," self",[104,517,212],{"class":124},[104,519,520],{"class":215},"my_processed_data\n",[104,522,524],{"class":106,"line":523},30,[104,525,526],{"class":279},"    # retrieved_data is now [2, 4, 6, 8, 10], loaded from the datastore.\n",[104,528,530],{"class":106,"line":529},31,[104,531,140],{"emptyLinePlaceholder":139},[104,533,535,537,539,541,543,545,547,549,551,553,556,558,561,563,565],{"class":106,"line":534},32,[104,536,193],{"class":169},[104,538,154],{"class":124},[104,540,198],{"class":146},[104,542,400],{"class":201},[104,544,206],{"class":205},[104,546,209],{"class":169},[104,548,212],{"class":124},[104,550,409],{"class":215},[104,552,219],{"class":205},[104,554,555],{"class":201},"': Using data: ",[104,557,206],{"class":205},[104,559,560],{"class":169},"retrieved_data",[104,562,219],{"class":205},[104,564,427],{"class":201},[104,566,225],{"class":124},[104,568,570,573,575,577,579,581,583,585,587,589,592],{"class":106,"line":569},33,[104,571,572],{"class":114},"    doubled_again ",[104,574,289],{"class":124},[104,576,292],{"class":124},[104,578,331],{"class":114},[104,580,334],{"class":124},[104,582,300],{"class":205},[104,584,339],{"class":110},[104,586,342],{"class":114},[104,588,345],{"class":110},[104,590,591],{"class":114}," retrieved_data",[104,593,318],{"class":124},[104,595,597,599,601,604,606],{"class":106,"line":596},34,[104,598,231],{"class":114},[104,600,212],{"class":124},[104,602,603],{"class":215},"final_result",[104,605,374],{"class":124},[104,607,608],{"class":114}," doubled_again\n",[104,610,612,614,616,618,620,622,624,627],{"class":106,"line":611},35,[104,613,231],{"class":114},[104,615,212],{"class":124},[104,617,236],{"class":169},[104,619,154],{"class":124},[104,621,185],{"class":114},[104,623,212],{"class":124},[104,625,626],{"class":215},"end",[104,628,225],{"class":124},[104,630,632],{"class":106,"line":631},36,[104,633,140],{"emptyLinePlaceholder":139},[104,635,637,639],{"class":106,"line":636},37,[104,638,166],{"class":124},[104,640,170],{"class":169},[104,642,644,646,649,651,653],{"class":106,"line":643},38,[104,645,176],{"class":146},[104,647,648],{"class":169}," end",[104,650,154],{"class":124},[104,652,185],{"class":184},[104,654,160],{"class":124},[104,656,658],{"class":106,"line":657},39,[104,659,140],{"emptyLinePlaceholder":139},[104,661,663],{"class":106,"line":662},40,[104,664,665],{"class":279},"    # 'final_result' would also be persisted after this step completes.\n",[104,667,669,671,673,675,677,679,681,683,685,687,690,692,694,696,698,700,702],{"class":106,"line":668},41,[104,670,193],{"class":169},[104,672,154],{"class":124},[104,674,198],{"class":146},[104,676,400],{"class":201},[104,678,206],{"class":205},[104,680,209],{"class":169},[104,682,212],{"class":124},[104,684,409],{"class":215},[104,686,219],{"class":205},[104,688,689],{"class":201},"': Final result: ",[104,691,206],{"class":205},[104,693,185],{"class":114},[104,695,212],{"class":124},[104,697,603],{"class":215},[104,699,219],{"class":205},[104,701,427],{"class":201},[104,703,225],{"class":124},[104,705,707,709,711,713,716,718,720,722,724,726,729],{"class":106,"line":706},42,[104,708,193],{"class":169},[104,710,154],{"class":124},[104,712,198],{"class":146},[104,714,715],{"class":201},"\"Flow ",[104,717,206],{"class":205},[104,719,209],{"class":169},[104,721,212],{"class":124},[104,723,216],{"class":215},[104,725,219],{"class":205},[104,727,728],{"class":201}," finished.\"",[104,730,225],{"class":124},[104,732,734],{"class":106,"line":733},43,[104,735,140],{"emptyLinePlaceholder":139},[104,737,739],{"class":106,"line":738},44,[104,740,741],{"class":279},"# Upon step 'process_data' completion:\n",[104,743,745],{"class":106,"line":744},45,[104,746,747],{"class":279},"# 2. Serialization: `self.my_processed_data` (the list [2, 4, 6, 8, 10]) is serialized (e.g., pickled).\n",[104,749,751],{"class":106,"line":750},46,[104,752,753],{"class":279},"# 3. Hashing: A content hash (e.g., SHA1) is computed from the serialized bytes.\n",[104,755,757],{"class":106,"line":756},47,[104,758,759],{"class":279},"# 4. Persistence (Write to Datastore): The serialized bytes are written to the datastore,\n",[104,761,763],{"class":106,"line":762},48,[104,764,765],{"class":279},"#    often using the hash as part of its storage key. This is a datastore write operation.\n",[104,767,769],{"class":106,"line":768},49,[104,770,771],{"class":279},"# 5. Metadata Update: Metaflow's metadata service records info about this artifact:\n",[104,773,775],{"class":106,"line":774},50,[104,776,777],{"class":279},"#    flow, run ID, step name, task ID, and its content hash.\n",[15,779,780],{},"When we talk about the \"artifact lifecycle,\" we're describing the journey of a piece of data. This journey starts the moment you assign it to an attribute of self (like self.my_data = some_object) within a Metaflow step, continues as it's persisted in the datastore, and completes when it's retrieved for use in later steps or by external tools. Understanding this lifecycle, especially its interactions with the datastore, is key to grasping how Metaflow effectively manages data throughout your workflow.",[782,783,785],"h3",{"id":784},"stages-of-the-artifact-lifecycle","Stages of the Artifact Lifecycle",[15,787,788],{},"Let's break down the typical stages:",[790,791,792,802,819,825,831,837],"ol",{},[42,793,794,797,798,801],{},[27,795,796],{},"Creation & Assignment",": The lifecycle kicks off inside a step when a Python object is assigned to an instance variable of your flow class, for instance, ",[101,799,800],{},"self.my_model = trained_model_object",". At this exact moment, the object exists purely in the memory of the task executing that step.",[42,803,804,807,808,810,811,814,815,818],{},[27,805,806],{},"Serialization",": As soon as the step finishes successfully, Metaflow automatically takes all objects assigned to ",[101,809,185],{}," (like ",[101,812,813],{},"self.my_model",") and serializes them. This process, usually handled by Python's ",[101,816,817],{},"pickle"," module, converts your live Python objects into a byte stream. This byte stream format is what's suitable for storage and for sending across a network if needed.",[42,820,821,824],{},[27,822,823],{},"Hashing",": Right after serialization, a content hash (e.g., a SHA1 hash) is computed from this byte stream. As we discussed under \"Content-Addressed Storage,\" this hash acts as a unique fingerprint for the artifact's content.",[42,826,827,830],{},[27,828,829],{},"Persistence (Write to Datastore)",": The serialized byte stream is then written to Metaflow's configured datastore (like Amazon S3 or a local file system). This is a critical datastore write operation. The artifact is typically stored in a way that its content hash forms part of its storage path or key, directly linking its unique identity to its physical location.",[42,832,833,836],{},[27,834,835],{},"Metadata Update",": Simultaneously, Metaflow's metadata service (which could be running locally or be a remote service like the Metaflow Service) gets an update. This update logs essential information about the newly minted artifact: it links the artifact to the specific flow, run ID, step name, task ID, and, crucially, its content hash. This metadata acts like an index or a card catalog, allowing Metaflow to efficiently find and retrieve artifacts later on.",[42,838,839,842,843,845,846,849,850],{},[27,840,841],{},"Access (Read from Datastore)",": When a subsequent step in your flow needs this artifact (e.g., it tries to access ",[101,844,813],{},"), or when you access it using the Metaflow Client API (e.g., ",[101,847,848],{},"Run('MyFlow/123').data.my_model","), the process is essentially reversed:",[39,851,852,855,858],{},[42,853,854],{},"Metaflow first consults the metadata service to find the location of the required artifact, using the recorded hash.",[42,856,857],{},"It then retrieves the corresponding byte stream from the datastore. This is a datastore read operation.",[42,859,860,861,863,864,867],{},"Finally, this byte stream is deserialized (unpickled) back into a Python object in the memory of the task or client environment that requested it. This makes ",[101,862,813],{}," (or ",[101,865,866],{},"run.data.my_model",") available again, with its original content intact.",[15,869,870],{},"A vital aspect to remember is immutability. Once an artifact makes it to the datastore (Stage 4), it's considered unchangeable. If a step is re-run (perhaps due to a resume or a new run) and the value of self.my_model changes, this will trigger a new serialization, generate a new hash, and consequently, a new, distinct artifact will be created and stored. The original artifact from the previous attempt remains untouched in the datastore, associated with its original task.",[15,872,873],{},"The following diagram visually summarizes this lifecycle:",[77,875],{"src":876,"width":80},"/content/learn/datastore-internals-02.png",[15,878,879],{},"This carefully orchestrated lifecycle ensures that your data is managed consistently, versioned effectively, and can be reliably passed between different parts of a Metaflow workflow, all underpinned by robust interactions with the datastore and the metadata service.",[68,881,882],{},[15,883,884],{},"When your Metaflow setup uses a remote datastore like Amazon S3, several of these interactions—such as uploading code packages, writing and reading artifacts, or any explicit S3 client calls within your steps—will involve network operations. The speed and efficiency of these operations can be influenced by factors like the size of your artifacts, your network bandwidth, and the current performance of S3.",[15,886,887],{},"How Metaflow Makes resume Possible",[15,889,890,891,894,895,897,898,900],{},"One of Metaflow's most valued features, especially when you're building complex or long-running pipelines, is the ability to ",[101,892,893],{},"resume"," a flow that failed or was interrupted. Instead of having to restart the entire computation from the very beginning—which can be incredibly time-consuming and costly—",[101,896,893],{}," allows the flow to pick up from the point of failure. This capability is a massive productivity booster. The ",[101,899,893],{}," mechanism is deeply connected to Metaflow's persistence strategy and relies on a few key components working together:",[782,902,904],{"id":903},"key-components-of-resumption","Key Components of Resumption",[790,906,907,916,933,946,955],{},[42,908,909,912,913,915],{},[27,910,911],{},"Step-as-Checkpoint",": As we've seen, every step in Metaflow inherently acts as a checkpoint. Upon the successful completion of any step, all its output artifacts (any data you've assigned to ",[101,914,185],{},") are durably persisted in the configured datastore. This ensures that the state of your flow is systematically saved at regular intervals.",[42,917,918,921,922,925,926,925,929,932],{},[27,919,920],{},"Tracking Run State",": The Metaflow metadata service meticulously keeps track of the status (e.g., ",[101,923,924],{},"running",", ",[101,927,928],{},"completed",[101,930,931],{},"failed",") of each individual step within every run. This provides a clear, auditable record of the flow's progress and allows Metaflow to pinpoint exactly where a failure occurred.",[42,934,935,938,939,941,942,945],{},[27,936,937],{},"Content-Addressing for Code and Data",": When you initiate a ",[101,940,893],{}," (e.g., by running ",[101,943,944],{},"python my_flow.py resume","), Metaflow first examines the state of the previously attempted run. For each step, it performs a crucial comparison: it looks at the content hash of the current code for that step and the hashes of its input artifact dependencies, and compares them against what was recorded for any previous successful execution of that same step within the same run lineage.",[42,947,948,951,952,954],{},[27,949,950],{},"Skipping the Already Done",": If the code for a step and its input artifacts (which are derived from successfully completed parent steps) haven't changed relative to a previously successful execution of that step in the current run lineage, Metaflow intelligently skips re-executing that step. It simply loads the previously computed output artifacts for that step directly from the datastore, presenting them to downstream steps as if the step had just run. This behavior is fundamental to ",[101,953,893],{}," and, as we'll see shortly, is also the core principle behind Metaflow's caching.",[42,956,957,960,961,963],{},[27,958,959],{},"Resuming from the Point of Failure",": If a step had previously failed, the ",[101,962,893],{}," command will attempt to re-execute that specific failed step (and, naturally, all subsequent steps in the Directed Acyclic Graph, or DAG). Importantly, the input artifacts that this failed step requires are loaded from the datastore, ensuring it starts with the exact same state as its previous, unsuccessful attempt.",[965,966,969],"callout",{"icon":967,"type":968},"i-heroicons-light-bulb-solid","info",[15,970,971],{},"The Core Benefit of resume: The most significant advantage of the resume feature is the substantial saving of computational time and resources. By cleverly avoiding the re-execution of parts of your workflow that have already completed successfully, you can iterate much faster, especially when debugging or dealing with transient issues.",[15,973,974],{},"Imagine this scenario:",[15,976,977],{},[77,978],{"alt":979,"src":980},"Diagram illustrating flow resumption: Step A and B completed, Step C failed. On resume, Step A and B are skipped (outputs loaded from datastore), and execution restarts from Step C.","/content/learn/datastore-internals-03.png",[15,982,983],{},"It's the combination of automatic artifact persistence (checkpointing), detailed metadata tracking, and content-addressing for both your data and your code that makes this intelligent resumption possible. This allows you to build more resilient pipelines and iterate on your work with greater speed and confidence.",[15,985,986],{},"Understanding Caching Behavior",[15,988,989],{},"Metaflow's caching mechanism is another powerful feature designed to significantly speed up your workflow execution. It achieves this by cleverly avoiding the recomputation of steps whose code and inputs haven't changed since a previous successful run. This behavior shares its foundational principles with the resume functionality, relying heavily on content-addressing and the persistent nature of artifacts in the datastore.",[782,991,993],{"id":992},"how-caching-works","How Caching Works",[15,995,996],{},"Before executing any step in your flow, Metaflow performs an internal check. It tries to determine if an identical version of that step—considering its code, its input artifacts, and implicitly its execution environment (like Python library versions defined via @conda or @pypi decorators)—has been successfully executed before within the same flow lineage (i.e., for the same flow name).",[15,998,999],{},"If all these conditions perfectly match a previously recorded successful execution, Metaflow achieves what we call a \"cache hit.\" In this scenario:",[790,1001,1002,1008],{},[42,1003,1004,1005,212],{},"The actual code execution for the step is ",[27,1006,1007],{},"skipped entirely",[42,1009,1010],{},"Metaflow directly retrieves the previously computed and stored output artifacts for that step from the datastore. These artifacts are then made available to any downstream steps, exactly as if the step had just run anew.",[15,1012,1013],{},"If any of these conditions do not match (a \"cache miss\"), the step is executed normally. Its new output artifacts are then persisted to the datastore, potentially becoming candidates for caching in future runs.",[782,1015,1017],{"id":1016},"conditions-for-a-cache-hit","Conditions for a Cache Hit",[15,1019,1020],{},"For Metaflow to decide to use a cached result for a step, the following conditions must generally hold true:",[39,1022,1023,1029,1035],{},[42,1024,1025,1028],{},[27,1026,1027],{},"Identical Code",": The content-hash of the current code for the step must be identical to the content-hash of the code from a previous successful execution of that step. Any change to your step's code will break the cache.",[42,1030,1031,1034],{},[27,1032,1033],{},"Identical Input Artifacts",": The content-hashes of all input artifacts for the current attempt of the step must perfectly match the content-hashes of the input artifacts from that same previous successful execution. If any upstream data changes, this step (and subsequent ones) will likely recompute.",[42,1036,1037,1040,1041,1044,1045,1048],{},[27,1038,1039],{},"Consistent Environment",": While not always hashed as a separate, explicit entity, the execution environment should be consistent. This includes factors like the Python version and, importantly, library versions managed by decorators like ",[101,1042,1043],{},"@conda"," or ",[101,1046,1047],{},"@pypi",". Changes in these can lead to different code behavior or artifact serialization, implicitly causing a cache miss even if your direct step code hasn't changed.",[782,1050,1052],{"id":1051},"benefits-of-caching","Benefits of Caching",[39,1054,1055,1061,1067],{},[42,1056,1057,1060],{},[27,1058,1059],{},"Saves Precious Computation Time",": By skipping redundant computations for steps that haven't changed, caching can dramatically reduce the overall runtime of your flows. This is especially true for steps involving intensive processing, data loading, or model training.",[42,1062,1063,1066],{},[27,1064,1065],{},"Conserves Computational Resources",": Avoiding re-execution means less demand on CPU, memory, and other resources. In cloud environments, this can translate directly into cost savings.",[42,1068,1069,1072],{},[27,1070,1071],{},"Accelerates Iterative Development",": Caching shines during the development and debugging phases of your project.",[965,1074,1075],{"icon":967,"type":968},[15,1076,1077],{},"Speed Up Your Iterations with Caching: Caching is a huge boon when you're actively developing or refining a specific part of your flow, perhaps a downstream modeling step. You can re-run the entire flow, and Metaflow will quickly skip through all the earlier, unchanged steps, allowing you to get to the part you're working on much faster. This enables rapid experimentation and significantly quicker feedback cycles.",[15,1079,1080],{},"The caching logic can be visualized as follows:",[77,1082],{"src":1083,"width":1084},"/content/learn/datastore-internals-04.png",500,[15,1086,1087],{},"By smartly leveraging content-addressing and the robust persistence of artifacts, Metaflow's caching provides an intelligent way to optimize workflow execution, often without requiring any manual intervention or configuration from you, the developer.",[15,1089,1090],{},"Wrapping Up: Why Datastore Internals Matter to You",[15,1092,1093],{},"Metaflow's sophisticated dance with its datastore, built on principles like content-addressed storage and a meticulously defined artifact lifecycle, is far more than just an internal implementation detail. It's the very foundation of the framework's power, reliability, and developer-friendliness.",[782,1095,1097],{"id":1096},"key-features-enabled-by-datastore-internals","Key Features Enabled by Datastore Internals",[15,1099,1100],{},"As we've explored, the ability to uniquely identify, immutably store, and efficiently retrieve every artifact and even the code itself is what enables key features that you likely use every day:",[39,1102,1103,1109,1118],{},[42,1104,1105,1108],{},[27,1106,1107],{},"Efficient Caching",": Saving you time and computational resources by intelligently skipping already-computed steps.",[42,1110,1111,1117],{},[27,1112,1113,1114,1116],{},"Robust Flow Resumption (",[101,1115,893],{},")",": Allowing you to pick up right where you left off after failures, making your development process more resilient.",[42,1119,1120,1123],{},[27,1121,1122],{},"Reliable Versioning and Reproducibility",": Giving you confidence that you can always revisit past results and understand exactly how they were produced.",[782,1125,1127],{"id":1126},"empowering-your-workflow-development","Empowering Your Workflow Development",[15,1129,1130],{},"Understanding when and how Metaflow interacts with the datastore—from the initial packaging of your code to the persistence and retrieval of every single artifact—provides you with crucial insights. This knowledge helps in:",[39,1132,1133,1136,1139],{},[42,1134,1135],{},"Predicting workflow behavior.",[42,1137,1138],{},"Understanding performance characteristics (e.g., why a step might be slow if it's frequently reading/writing large artifacts to a remote store).",[42,1140,1141],{},"Developing more effective debugging strategies.",[15,1143,1144],{},"Ultimately, a solid grasp of these datastore internals empowers you to design more efficient, resilient, and debuggable Metaflow workflows. It allows you to fully harness the framework's capabilities to manage complex data pipelines with greater confidence and productivity.",[1146,1147,1148],"style",{},"html pre.shiki code .sNZSE, html code.shiki .sNZSE{--shiki-default:#39ADB5;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sv0dM, html code.shiki .sv0dM{--shiki-default:#90A4AE;--shiki-dark:#BABED8}html pre.shiki code .s4Nzc, html code.shiki .s4Nzc{--shiki-default:#39ADB5;--shiki-dark:#89DDFF}html pre.shiki code .sBv9x, html code.shiki .sBv9x{--shiki-default:#9C3EDA;--shiki-dark:#C792EA}html pre.shiki code .s2dLm, html code.shiki .s2dLm{--shiki-default:#E2931D;--shiki-dark:#FFCB6B}html pre.shiki code .sp2xM, html code.shiki .sp2xM{--shiki-default:#6182B8;--shiki-dark:#82AAFF}html pre.shiki code .swAhH, html code.shiki .swAhH{--shiki-default:#E53935;--shiki-default-font-style:italic;--shiki-dark:#F07178;--shiki-dark-font-style:italic}html pre.shiki code .s9-rc, html code.shiki .s9-rc{--shiki-default:#91B859;--shiki-dark:#C3E88D}html pre.shiki code .sRqct, html code.shiki .sRqct{--shiki-default:#F76D47;--shiki-dark:#F78C6C}html pre.shiki code .sbA4_, html code.shiki .sbA4_{--shiki-default:#E53935;--shiki-dark:#F07178}html pre.shiki code .s742E, html code.shiki .s742E{--shiki-default:#90A4AE;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":99,"searchDepth":136,"depth":136,"links":1150},[1151,1152],{"id":21,"depth":136,"text":22},{"id":90,"depth":136,"text":91,"children":1153},[1154,1155,1156,1157,1158,1159,1160],{"id":784,"depth":143,"text":785},{"id":903,"depth":143,"text":904},{"id":992,"depth":143,"text":993},{"id":1016,"depth":143,"text":1017},{"id":1051,"depth":143,"text":1052},{"id":1096,"depth":143,"text":1097},{"id":1126,"depth":143,"text":1127},"Explore how Metaflow interacts with the datastore, enabling features like caching and resume.","md",null,{},"Datastore, Caching & Resume",{"component":1167,"props":1168},"LearnOgImage",{"title":1169},"Metaflow Datastore Internals","/learn/deep-dives/persistence/datastore-internals","index, follow",{"title":5,"description":1161,"robots":1171},{"loc":1170,"images":1174,"changefreq":1178,"priority":1179},[1175,1176,1177],{"loc":79},{"loc":876},{"loc":1083},"monthly",0.8,"1.learn/1.deep-dives/1.persistence/2.datastore-internals","77tqBUT9ajQbhzi3rF3S6H__czYF6TCPLvQXAAJWSnQ",[],[1184,1189],{"title":1185,"path":1186,"stem":1187,"navigationTitle":1188,"order":107,"children":-1},"Understanding Metaflow Persistence: Artifacts, Datastores, and Best Practices","/learn/deep-dives/persistence","1.learn/1.deep-dives/1.persistence/1.index","Persistence Overview",{"title":1190,"path":1191,"stem":1192,"navigationTitle":1190,"order":136,"children":-1},"Patterns","/learn/patterns","1.learn/2.patterns/1.index",1751421603221]